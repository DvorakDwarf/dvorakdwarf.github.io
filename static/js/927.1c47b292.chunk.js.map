{"version":3,"file":"static/js/927.1c47b292.chunk.js","mappings":"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","sources":["articles/ScrambledTitle.jsx","articles/content/fauxnix/Article.jsx","../node_modules/use-scramble/src/index.ts"],"sourcesContent":["import { useScramble } from \"use-scramble\";\n\nexport function useScrambledTitle(text) {\n    const { ref, replay } = useScramble({ \n      text: text,\n      speed: 1,\n      overdrive: false,\n      scramble: 10\n    });\n  \n    return <h1 className='scrambled' ref={ref} onClick={replay}></h1>\n}","import '../../default.css';\nimport React from \"react\";\nimport './theme.css'\nimport { useScrambledTitle } from '../../ScrambledTitle';\n\nimport Navbar from '../../../components/navbar/Navbar';\nimport Footer from '../../../components/footer/Footer';\n\nfunction Hi() {\n  const meta = require(\"./meta.json\");\n\n  const date = new Date(meta.date).toLocaleDateString('en-us', {\n    year:\"numeric\", \n    month:\"short\",\n    day:\"2-digit\"\n    }) // \"Jul 2021 Friday\"\n\n\n  return (\n    <div className=\"fauxnix\">\n      <Navbar />\n     <article>\n      <div className=\"cover\">\n        {useScrambledTitle(meta.title)}\n        <time>{date}</time>\n        <img className='thumbnail' src={require('./images/example.png')}></img>\n        <hr/>\n      </div>\n      <main>  \n        <p>\n          If you are looking for a description of how to use the program, please refer to \n          <a href='https://github.com/DvorakDwarf/fauxnix'> https://github.com/DvorakDwarf/fauxnix</a>\n        </p>\n        <p>\n          I really like the idea of NixOS, just not using it. A central config is \n          the hottest thing invented since sliced bread. Being able to reproduce your \n          entire system from just one file is phenomenal. Being able to go to a previous\n          generation when things go wrong is life-saving and single-handedly reduces the \n          annual number of computers thrown out of windows worldwide by half. However, I don't like how strict it is\n          and how it forces you to do things the Nix wayâ„¢. Installing things from github or any\n          source other than Nixpkgs can get messy. I don't care about your nerd philosophy\n          of perfect reproducibility and isolated packages, I just want to play the latest \n          osu!lazer version in peace. \n        </p>\n        <p>\n          The natural solution is for me to write this Nix wannabe program for a couple of \n          weeks and I think it works now. It does basically everything I want Nix to do for me.\n          Writing the program was not a problem, trying to make a package from it absolutely was. \n        </p>\n        <img src={require('./images/archlogo.png')}></img>\n        <span>The arch in question</span>\n        <p>\n          I use Arch Linux and so naturally I wanted to create a package in the Arch User \n          Repository for other people to use. This involves writing a <code>PKGBUILD </code>\n          file which describes how the installation works. The idea was also inspired by some\n          random person who made an AUR package for my Infinite-Storage-Glitch. I thought it \n          couldn't be too hard.\n        </p>\n        <h2>It Was</h2>\n        <p>\n          Fauxnix is written in Python and I'm gonna be real, I didn't know it could be compiled.\n          That was the first thing I had to figure out. I settled on using <code>setuptools. </code>\n          I tried getting further along on my <code>PKGBUILD</code> progress but got stuck on \n          trying to understand where to place the files and how to make it run from PATH. The \n          former was answered by some good samaritans in the Arch Linux programming channel on discord.\n          The latter drove me mad. You'd think such a common question would be very well known and have\n          many direct first-page answers. Unfortunately I missed the page in <code>setuptools </code>\n          docs that explain it and ask online for help.\n        </p>\n        <p>\n          In the Python discord server, I was given an incorrect answer and then my question was closed.\n          In the Arch Linux server, I was told an answer I explicitly was not interested in, followed by\n          programs that write PKGBUILDS from PyPI packages, unrelated to the question.\n        </p>\n        <img src={require('./images/dumb.png')}></img>\n        <span>I've re-read this article and have to say I was unnecessarily mad.</span>\n        <p>\n          I did eventually find what I was missing and figured it out. The exact details of \n          how to write a PKGBUILD for a python app I'll put in a separate article for those\n          who struggled like me.\n        </p>\n        <p>(2024) since writing this I have moved back to use NixOS</p>\n      </main>\n    </article>\n    <Footer />\n    </div>\n  );\n}\n\nexport default Hi;\n","import { useEffect, useRef } from 'react';\n\nfunction getRandomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomChar(range: RangeOrCharCodes) {\n  let rand = 0;\n  if (range.length === 2) {\n    rand = getRandomInt(range[0], range[1]);\n  } else {\n    rand = range[getRandomInt(0, range.length - 1)];\n  }\n\n  return String.fromCharCode(rand);\n}\n\ntype RangeOrCharCodes = {\n  0: number;\n  1: number;\n} & Array<number>;\n\nexport type UseScrambleProps = {\n  /**\n   * When playOnMount is true, the animation will not play the first time a text input is provided.\n   */\n  playOnMount?: boolean;\n  /**\n   * Optional text input\n   */\n  text?: string;\n  /**\n   * 0-1 range that determines the scramble speed. A speed of 1 will redraw 60 times a second. A speed of 0 will pause the animation\n   *\n   * @default 1\n   */\n  speed?: number;\n  /**\n   * The controller will move forward along the text input and scramble more characters, at a pace of `tick` frames. Combined with the `speed` prop, you can control the animation rate\n   *\n   * @default 1\n   */\n  tick?: number;\n  /**\n   * Step forward on every tick\n   *\n   * @default 1\n   */\n  step?: number;\n\n  /**\n   * Chance of scrambling a character, range from 0 to 1, 0 being no chance, and 1 being 100% chance\n   */\n  chance?: number;\n  /**\n   * Randomize `seed` characters at random text positions\n   *\n   * @default 1\n   */\n  seed?: number;\n  /**\n   * How many times to scramble each character?\n   *\n   * @default 1\n   */\n  scramble?: number;\n  /**\n   * Characters to avoid scrambling\n   */\n  ignore?: string[];\n\n  /**\n   * Unicode character range for scrambler.\n   *\n   * If a tupple is provided [60,125], it will randomly choose a unicode character code within that range.\n   *\n   * If the array contains more than two unicode values, it will choose randomly from the array values only.\n   *\n   * To randomize with only two values, you can repeat them in the array [91,93,91,93]\n   *\n   * @default [65,125]\n   */\n  range?: RangeOrCharCodes;\n  /**\n   * Set the animation to overdrive mode, and set the unicode character code to use in the animation\n   */\n  overdrive?: boolean | number;\n  /**\n   * Always start text animation from an empty string\n   *\n   * @default false\n   */\n  overflow?: boolean;\n\n  /**\n   * Callback when animation starts drawing\n   */\n  onAnimationStart?: Function;\n\n  /**\n   * Callback for when the animation finished\n   */\n  onAnimationEnd?: Function;\n\n  /**\n   * onRedraw callback\n   */\n  onAnimationFrame?: (result: string) => void;\n};\n\nexport const useScramble = (props: UseScrambleProps) => {\n  let {\n    playOnMount = true,\n    text = '',\n    speed = 1,\n    seed = 1,\n    step = 1,\n    tick = 1,\n    scramble = 1,\n    chance = 1,\n    overflow = true,\n    range = [65, 125],\n    overdrive = true,\n    onAnimationStart,\n    onAnimationFrame,\n    onAnimationEnd,\n    ignore = [' '],\n  } = props;\n\n  const prefersReducedMotion =\n    typeof window !== \"undefined\"\n      ? window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches\n      : false;\n\n  if (prefersReducedMotion) {\n    step = text.length;\n    chance = 0;\n    overdrive = false;\n  }\n\n  // text node ref\n  const nodeRef = useRef<any>(null);\n\n  // animation frame request\n  const rafRef = useRef<number>(0);\n\n  // compute\n  const elapsedRef = useRef(0);\n  const fpsInterval = 1000 / (60 * speed);\n\n  // scramble step\n  const stepRef = useRef<number>(0);\n\n  // current character index ref\n  const scrambleIndexRef = useRef<number>(0);\n\n  // scramble controller\n  const controlRef = useRef<Array<string | number | null>>([]);\n\n  // overdrive control index\n  const overdriveRef = useRef<number>(0);\n\n  const setIfNotIgnored = (\n    value: string | number | null | number,\n    replace: string | number | null\n  ) => (ignore.includes(`${value}`) ? value : replace);\n\n  // pick random character ahead in the string, and add them to the randomizer\n  const seedForward = () => {\n    if (scrambleIndexRef.current === text.length) return;\n\n    for (var i = 0; i < seed; i++) {\n      const index = getRandomInt(\n        scrambleIndexRef.current,\n        controlRef.current.length\n      );\n      if (\n        typeof controlRef.current[index] !== 'number' &&\n        typeof controlRef.current[index] !== 'undefined'\n      ) {\n        controlRef.current[index] = setIfNotIgnored(\n          controlRef.current[index],\n          getRandomInt(0, 10) >= (1 - chance) * 10 ? scramble || seed : 0\n        );\n      }\n    }\n  };\n\n  // add `step` characters to the randomizer, and increase the scrambleIndexRef pointer\n  const stepForward = () => {\n    for (var i = 0; i < step; i++) {\n      if (scrambleIndexRef.current < text.length) {\n        const currentIndex = scrambleIndexRef.current;\n\n        const shouldScramble = getRandomInt(0, 10) >= (1 - chance) * 10;\n\n        controlRef.current[currentIndex] = setIfNotIgnored(\n          text[scrambleIndexRef.current],\n          shouldScramble\n            ? scramble + getRandomInt(0, Math.ceil(scramble / 2))\n            : 0\n        );\n        scrambleIndexRef.current++;\n      }\n    }\n  };\n\n  const resizeControl = () => {\n    if (text.length < controlRef.current.length) {\n      controlRef.current.pop();\n      controlRef.current.splice(text.length, step);\n    }\n    for (var i = 0; i < step; i++) {\n      if (controlRef.current.length < text.length) {\n        controlRef.current.push(\n          setIfNotIgnored(text[controlRef.current.length + 1], null)\n        );\n      }\n    }\n  };\n\n  const onOverdrive = () => {\n    if (!overdrive) return;\n\n    for (var i = 0; i < step; i++) {\n      const max = Math.max(controlRef.current.length, text.length);\n      if (overdriveRef.current < max) {\n        controlRef.current[overdriveRef.current] = setIfNotIgnored(\n          text[overdriveRef.current],\n          String.fromCharCode(typeof overdrive === 'boolean' ? 95 : overdrive)\n        );\n        overdriveRef.current++;\n      }\n    }\n  };\n\n  const onTick = () => {\n    stepForward();\n    resizeControl();\n    seedForward();\n  };\n\n  /**\n   * Control the animation framerate, from the speed prop\n   *\n   * if speed is 0, stop the animation\n   */\n  const animate = (time: number) => {\n    if (!speed) return;\n\n    rafRef.current = requestAnimationFrame(animate);\n\n    onOverdrive();\n\n    const timeElapsed = time - elapsedRef.current;\n    if (timeElapsed > fpsInterval) {\n      elapsedRef.current = time;\n\n      if (stepRef.current % tick === 0) {\n        onTick();\n      }\n\n      draw();\n    }\n  };\n\n  /**\n   * Redraw text on every animation frame\n   */\n  const draw = () => {\n    if (!nodeRef.current) return;\n\n    let result = '';\n\n    for (var i = 0; i < controlRef.current.length; i++) {\n      const controlValue = controlRef.current[i];\n\n      switch (true) {\n        /**\n         * a positive integer value, get a random character\n         */\n        case typeof controlValue === 'number' && controlValue > 0:\n          result += getRandomChar(range);\n\n          if (i <= scrambleIndexRef.current) {\n            // reduce scramble index only if it's past the scrambleIndexRef\n            controlRef.current[i] = (controlRef.current[i] as number) - 1;\n          }\n          break;\n\n        /**\n         * a string from the previous text\n         */\n        case typeof controlValue === 'string' &&\n          (i >= text.length || i >= scrambleIndexRef.current):\n          result += controlValue;\n          break;\n\n        /**\n         * before scramble index, and equal to the string\n         */\n        case controlValue === text[i] && i < scrambleIndexRef.current:\n          result += text[i];\n          break;\n\n        /**\n         * scramble has finished\n         */\n        case controlValue === 0 && i < text.length:\n          result += text[i];\n          controlRef.current[i] = text[i];\n          break;\n\n        default:\n          result += '';\n      }\n    }\n\n    // set text\n    nodeRef.current.innerHTML = result;\n\n    onAnimationFrame && onAnimationFrame(result);\n\n    /**\n     * Exit if the result is equal to the input\n     *\n     * - Trim control to text length\n     * - fire onAnimationEnd\n     */\n    if (result === text) {\n      controlRef.current.splice(text.length, controlRef.current.length);\n      onAnimationEnd && onAnimationEnd();\n\n      cancelAnimationFrame(rafRef.current);\n    }\n\n    stepRef.current++;\n  };\n\n  /**\n   * Reset scramble controls\n   *\n   * if overflow is true, overflow the control to the an empty array, the size of the text input. This will cause the animation to play from an empty string\n   */\n  const reset = () => {\n    stepRef.current = 0;\n    scrambleIndexRef.current = 0;\n    overdriveRef.current = 0;\n    if (!overflow) {\n      controlRef.current = new Array(text?.length);\n    }\n  };\n\n  /**\n   * Restarts the animation\n   *\n   * Cancels the current animation frame, resets the scramble index and other controls, and requests a new animation\n   */\n  const play = () => {\n    cancelAnimationFrame(rafRef.current);\n    reset();\n    onAnimationStart && onAnimationStart();\n    rafRef.current = requestAnimationFrame(animate);\n  };\n\n  /**\n   * reset scramble when text input is changed\n   */\n  useEffect(() => {\n    reset();\n  }, [text]);\n\n  /**\n   * start or stop animation when text and speed change\n   */\n  useEffect(() => {\n    cancelAnimationFrame(rafRef.current);\n\n    rafRef.current = requestAnimationFrame(animate);\n\n    // cancel raf on unmount\n    return () => {\n      cancelAnimationFrame(rafRef.current);\n    };\n  }, [animate]);\n\n  useEffect(() => {\n    if (!playOnMount) {\n      controlRef.current = text.split('');\n      stepRef.current = text.length;\n      scrambleIndexRef.current = text.length;\n      overdriveRef.current = text.length;\n      draw();\n      cancelAnimationFrame(rafRef.current);\n    }\n  }, []);\n\n  return { ref: nodeRef, replay: play };\n};\n"],"names":["useScrambledTitle","text","_useScramble","useScramble","speed","overdrive","scramble","ref","replay","_jsx","className","onClick","meta","require","date","Date","toLocaleDateString","year","month","day","_jsxs","children","Navbar","title","src","href","Footer","getRandomInt","min","max","Math","floor","random","getRandomChar","range","rand","length","String","fromCharCode","props","_props$playOnMount","playOnMount","_props$text","_props$speed","_props$seed","seed","_props$step","step","_props$tick","tick","_props$scramble","_props$chance","chance","_props$overflow","overflow","_props$range","_props$overdrive","onAnimationStart","onAnimationFrame","onAnimationEnd","_props$ignore","ignore","window","matchMedia","matches","nodeRef","useRef","rafRef","elapsedRef","fpsInterval","stepRef","scrambleIndexRef","controlRef","overdriveRef","setIfNotIgnored","value","replace","includes","onTick","i","current","currentIndex","shouldScramble","ceil","stepForward","pop","splice","push","resizeControl","index","seedForward","animate","time","requestAnimationFrame","onOverdrive","draw","result","controlValue","innerHTML","cancelAnimationFrame","reset","Array","useEffect","split"],"sourceRoot":""}