{"version":3,"file":"static/js/759.c5a26b64.chunk.js","mappings":"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","sources":["articles/ScrambledTitle.jsx","articles/content/PKGGUIDE/Article.jsx","../node_modules/use-scramble/src/index.ts"],"sourcesContent":["import { useScramble } from \"use-scramble\";\n\nexport function useScrambledTitle(text) {\n    const { ref, replay } = useScramble({ \n      text: text,\n      speed: 1,\n      overdrive: false,\n      scramble: 10\n    });\n  \n    return <h1 className='scrambled' ref={ref} onClick={replay}></h1>\n}","import '../../default.css';\nimport './theme.css';\nimport React from \"react\";\nimport { useScrambledTitle } from '../../ScrambledTitle';\n\nimport Navbar from '../../../components/navbar/Navbar';\nimport Footer from '../../../components/footer/Footer';\n\nclass Codeblock extends React.Component {\n  render() {\n    const code_snippet = `\n    # Maintainer: Vasya Pupkin <dvorak.dwarf@gmail.com>\n    pkgname=fauxnix-git\n    pkgver=r64.cff5977\n    pkgrel=1\n    pkgdesc=\"Non-invasive* Reproducible* Declarative* config management for Nix non-believers\"\n    arch=('any')\n    url=\"https://github.com/DvorakDwarf/fauxnix\"\n    license=('GPL3')\n    depends=(python pacman python-ruamel-yaml)\n    makedepends=(git python-setuptools  python-build python-wheel python-installer)\n    provides=('fauxnix')\n    conflicts=('fauxnix')\n    source=(\"$pkgname::git+https://github.com/DvorakDwarf/fauxnix.git\")\n    md5sums=('SKIP')\n\n    pkgver() {\n      cd \"$pkgname\"\n      printf \"r%s.%s\" \"$(git rev-list --count HEAD)\" \"$(git rev-parse --short=7 HEAD)\"\n    }\n\n    build() {\n      cd \"$pkgname\"\n\n      python -m build --wheel --no-isolation\n    }\n\n    package() {\n      cd \"$pkgname\"\n\n      install -Dm644 src/fauxnix/fauxnix.yaml \"$pkgdir/etc/fauxnix.yaml\"\n      install -Dm644 LICENSE $pkgdir/usr/share/licenses/$pkgname/LICENSE\n      install -Dm644 README.md $pkgdir/usr/share/doc/$pkgname/README.md\n      install -Dm755 src/fauxnix.hook $pkgdir/usr/share/libalpm/hooks/fauxnix.hook\n\n      python -m installer --destdir=\"$pkgdir\" dist/*.whl\n    }\n  `\n\n    return(\n    <pre>\n      <code className=\"language-python\">\n        {code_snippet}\n      </code>\n    </pre>);\n  }\n}\n\nfunction Hi() {\n  const meta = require(\"./meta.json\");\n\n  const date = new Date(meta.date).toLocaleDateString('en-us', {\n    year:\"numeric\", \n    month:\"short\",\n    day:\"2-digit\"\n    }) // \"Jul 2021 Friday\"\n\n\n  return (\n    <div className=\"PKGBUILD\">\n      <Navbar />\n     <article>\n      <div className=\"cover\">\n        {useScrambledTitle(meta.title)}\n        <time>{date}</time>\n        <img className='thumbnail' src={require('./images/pkglogo.jpg')}></img>\n        <hr/>\n      </div>\n      <main>  \n        <p>\n          <h2>Preface on getting help.</h2> <br/>\n          If you find yourself using any of the following phrases or types of replies:\n          <ul>\n            <li>\"Help vampire\"</li>\n            <li>\"RTFM\"</li>\n            <li>(link to a wiki article with no further explanation)</li>\n            <li>(a command meant to solve the issue with no comment on how it works)</li>\n            <li>\"Read the docs\"</li>\n          </ul>\n          Know that every breath you take is a net negative impact on the planet. You replying \n          with nothing at all would have been a better use of everybody's time. Quietly simmer in \n          your elitist tech bro circle and never reply to another newbie again. The only reason \n          I am not going into any further detail of the way you deserve to be treated is the \n          admission officer possibly reading this article.\n        </p>\n        <h2>What the PKGBUILD does</h2>\n        <p> \n          First, you need to understand what the PKGBUILD actually does. The way it works is it \n          opens a directory <code>pkg</code> in the same directory you used the file. Every file\n          your program uses will first be placed there, <b>NOT THE SYSTEM</b>. That is why you\n          must include <code>$pkgdir</code> in your paths. Once the PKGBUILD ends, pacman will\n          look at the folder and copy the files into paths with the same name. \n          <code> $pkgdir/usr/bin/yourprogram</code> goes into <code>/usr/bin/yourprogram </code> \n          on the system. (You might need curly brackets around the pkgdir and pkgname variables)\n        </p>\n        <h2>The crucial details</h2>\n        <Codeblock/>\n        <p>\n          Variables you must have:<br/>\n          <ul>\n            <li>\n              pkgname: The name. Needs -git ending if taken from the git repo, -bin if installing\n              binaries and not building, start with python- if it's a python library (not app)\n            </li>\n            <li>pkgver: The version. If using git, set in pkgver() function</li>\n            <li>\n              pkgrel: If you needed it you'd know. 1 by default. Increment if it's the same version \n              has an update\n            </li>\n            <li>\n              arch: Architecture your software works on. 'any' for python since it's cross-platform\n            </li>\n            <li>\n              license: Name of license. 'MIT', 'GPL', and so on\n            </li>\n          </ul> \n          Variables you probably need: <br/>\n          <ul>\n            <li>\n              pkgdesc: A description of your package. 80 characters or less. \n              Do not reference the name of the package\n            </li>\n            <li>url: Your official site. Likely a github repo</li>\n            <li>\n              depends: Packages your software uses. Python libraries used included\n            </li>\n            <li>\n              makedepends: Packages only required to build the package, not for functionality.\n            </li>\n            <li>\n              provides/conflicts: The name of packages your package provides the function for.\n              Basically means that if you have a git package, put the name without git to \n              make sure you can't install both if you ever make one in the future\n            </li>\n            <li>\n              source: The URL from which the files required for your package would be downloaded from.\n              In the case of git, put git+ before the URL normally used to clone the repo\n            </li>\n            <li>\n              md5sums: Verify integrity with md5. 'SKIP' if using git \n            </li>\n          </ul> \n          Functions you likely need: <br/>\n          <ul>\n            <li>\n              pkgver(): If you are using git, set the version this way. Copy one from \n              <a href='https://wiki.archlinux.org/title/VCS_package_guidelines#Git'> arch wiki</a>\n            </li>\n            <li>\n              build(): Build package here. <code>python -m build --wheel --no-isolation</code>\n            </li>\n            <li>\n              package(): Shuffle all the files into the correct place here for pacman. Use the install\n              script to set permissions. 644 for reading and 755 for execution. Follow my PKGBUILD \n              above for paths where files are to be placed. Here you also run python -m installer\n            </li>\n          </ul>\n        </p>\n        <h2>Note on setup.py</h2>\n        <p>\n          You should avoid using it. For the build step of your python project, you need \n          <code> pyproject.toml</code> file to describe how your program ought to be built. \n          It was a replacement for setup.py. It has the same features and more. Use \n          python -m installer to make use of it. I was shown python -m install . which \n          seems to do the same thing but is less popular and allows you to still use setup.py\n          without explicitly calling it. I would still recommend avoiding it.\n        </p>\n      </main>\n    </article>\n    <Footer />\n    </div>\n  );\n}\n\nexport default Hi;\n","import { useEffect, useRef } from 'react';\n\nfunction getRandomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomChar(range: RangeOrCharCodes) {\n  let rand = 0;\n  if (range.length === 2) {\n    rand = getRandomInt(range[0], range[1]);\n  } else {\n    rand = range[getRandomInt(0, range.length - 1)];\n  }\n\n  return String.fromCharCode(rand);\n}\n\ntype RangeOrCharCodes = {\n  0: number;\n  1: number;\n} & Array<number>;\n\nexport type UseScrambleProps = {\n  /**\n   * When playOnMount is true, the animation will not play the first time a text input is provided.\n   */\n  playOnMount?: boolean;\n  /**\n   * Optional text input\n   */\n  text?: string;\n  /**\n   * 0-1 range that determines the scramble speed. A speed of 1 will redraw 60 times a second. A speed of 0 will pause the animation\n   *\n   * @default 1\n   */\n  speed?: number;\n  /**\n   * The controller will move forward along the text input and scramble more characters, at a pace of `tick` frames. Combined with the `speed` prop, you can control the animation rate\n   *\n   * @default 1\n   */\n  tick?: number;\n  /**\n   * Step forward on every tick\n   *\n   * @default 1\n   */\n  step?: number;\n\n  /**\n   * Chance of scrambling a character, range from 0 to 1, 0 being no chance, and 1 being 100% chance\n   */\n  chance?: number;\n  /**\n   * Randomize `seed` characters at random text positions\n   *\n   * @default 1\n   */\n  seed?: number;\n  /**\n   * How many times to scramble each character?\n   *\n   * @default 1\n   */\n  scramble?: number;\n  /**\n   * Characters to avoid scrambling\n   */\n  ignore?: string[];\n\n  /**\n   * Unicode character range for scrambler.\n   *\n   * If a tupple is provided [60,125], it will randomly choose a unicode character code within that range.\n   *\n   * If the array contains more than two unicode values, it will choose randomly from the array values only.\n   *\n   * To randomize with only two values, you can repeat them in the array [91,93,91,93]\n   *\n   * @default [65,125]\n   */\n  range?: RangeOrCharCodes;\n  /**\n   * Set the animation to overdrive mode, and set the unicode character code to use in the animation\n   */\n  overdrive?: boolean | number;\n  /**\n   * Always start text animation from an empty string\n   *\n   * @default false\n   */\n  overflow?: boolean;\n\n  /**\n   * Callback when animation starts drawing\n   */\n  onAnimationStart?: Function;\n\n  /**\n   * Callback for when the animation finished\n   */\n  onAnimationEnd?: Function;\n\n  /**\n   * onRedraw callback\n   */\n  onAnimationFrame?: (result: string) => void;\n};\n\nexport const useScramble = (props: UseScrambleProps) => {\n  let {\n    playOnMount = true,\n    text = '',\n    speed = 1,\n    seed = 1,\n    step = 1,\n    tick = 1,\n    scramble = 1,\n    chance = 1,\n    overflow = true,\n    range = [65, 125],\n    overdrive = true,\n    onAnimationStart,\n    onAnimationFrame,\n    onAnimationEnd,\n    ignore = [' '],\n  } = props;\n\n  const prefersReducedMotion =\n    typeof window !== \"undefined\"\n      ? window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches\n      : false;\n\n  if (prefersReducedMotion) {\n    step = text.length;\n    chance = 0;\n    overdrive = false;\n  }\n\n  // text node ref\n  const nodeRef = useRef<any>(null);\n\n  // animation frame request\n  const rafRef = useRef<number>(0);\n\n  // compute\n  const elapsedRef = useRef(0);\n  const fpsInterval = 1000 / (60 * speed);\n\n  // scramble step\n  const stepRef = useRef<number>(0);\n\n  // current character index ref\n  const scrambleIndexRef = useRef<number>(0);\n\n  // scramble controller\n  const controlRef = useRef<Array<string | number | null>>([]);\n\n  // overdrive control index\n  const overdriveRef = useRef<number>(0);\n\n  const setIfNotIgnored = (\n    value: string | number | null | number,\n    replace: string | number | null\n  ) => (ignore.includes(`${value}`) ? value : replace);\n\n  // pick random character ahead in the string, and add them to the randomizer\n  const seedForward = () => {\n    if (scrambleIndexRef.current === text.length) return;\n\n    for (var i = 0; i < seed; i++) {\n      const index = getRandomInt(\n        scrambleIndexRef.current,\n        controlRef.current.length\n      );\n      if (\n        typeof controlRef.current[index] !== 'number' &&\n        typeof controlRef.current[index] !== 'undefined'\n      ) {\n        controlRef.current[index] = setIfNotIgnored(\n          controlRef.current[index],\n          getRandomInt(0, 10) >= (1 - chance) * 10 ? scramble || seed : 0\n        );\n      }\n    }\n  };\n\n  // add `step` characters to the randomizer, and increase the scrambleIndexRef pointer\n  const stepForward = () => {\n    for (var i = 0; i < step; i++) {\n      if (scrambleIndexRef.current < text.length) {\n        const currentIndex = scrambleIndexRef.current;\n\n        const shouldScramble = getRandomInt(0, 10) >= (1 - chance) * 10;\n\n        controlRef.current[currentIndex] = setIfNotIgnored(\n          text[scrambleIndexRef.current],\n          shouldScramble\n            ? scramble + getRandomInt(0, Math.ceil(scramble / 2))\n            : 0\n        );\n        scrambleIndexRef.current++;\n      }\n    }\n  };\n\n  const resizeControl = () => {\n    if (text.length < controlRef.current.length) {\n      controlRef.current.pop();\n      controlRef.current.splice(text.length, step);\n    }\n    for (var i = 0; i < step; i++) {\n      if (controlRef.current.length < text.length) {\n        controlRef.current.push(\n          setIfNotIgnored(text[controlRef.current.length + 1], null)\n        );\n      }\n    }\n  };\n\n  const onOverdrive = () => {\n    if (!overdrive) return;\n\n    for (var i = 0; i < step; i++) {\n      const max = Math.max(controlRef.current.length, text.length);\n      if (overdriveRef.current < max) {\n        controlRef.current[overdriveRef.current] = setIfNotIgnored(\n          text[overdriveRef.current],\n          String.fromCharCode(typeof overdrive === 'boolean' ? 95 : overdrive)\n        );\n        overdriveRef.current++;\n      }\n    }\n  };\n\n  const onTick = () => {\n    stepForward();\n    resizeControl();\n    seedForward();\n  };\n\n  /**\n   * Control the animation framerate, from the speed prop\n   *\n   * if speed is 0, stop the animation\n   */\n  const animate = (time: number) => {\n    if (!speed) return;\n\n    rafRef.current = requestAnimationFrame(animate);\n\n    onOverdrive();\n\n    const timeElapsed = time - elapsedRef.current;\n    if (timeElapsed > fpsInterval) {\n      elapsedRef.current = time;\n\n      if (stepRef.current % tick === 0) {\n        onTick();\n      }\n\n      draw();\n    }\n  };\n\n  /**\n   * Redraw text on every animation frame\n   */\n  const draw = () => {\n    if (!nodeRef.current) return;\n\n    let result = '';\n\n    for (var i = 0; i < controlRef.current.length; i++) {\n      const controlValue = controlRef.current[i];\n\n      switch (true) {\n        /**\n         * a positive integer value, get a random character\n         */\n        case typeof controlValue === 'number' && controlValue > 0:\n          result += getRandomChar(range);\n\n          if (i <= scrambleIndexRef.current) {\n            // reduce scramble index only if it's past the scrambleIndexRef\n            controlRef.current[i] = (controlRef.current[i] as number) - 1;\n          }\n          break;\n\n        /**\n         * a string from the previous text\n         */\n        case typeof controlValue === 'string' &&\n          (i >= text.length || i >= scrambleIndexRef.current):\n          result += controlValue;\n          break;\n\n        /**\n         * before scramble index, and equal to the string\n         */\n        case controlValue === text[i] && i < scrambleIndexRef.current:\n          result += text[i];\n          break;\n\n        /**\n         * scramble has finished\n         */\n        case controlValue === 0 && i < text.length:\n          result += text[i];\n          controlRef.current[i] = text[i];\n          break;\n\n        default:\n          result += '';\n      }\n    }\n\n    // set text\n    nodeRef.current.innerHTML = result;\n\n    onAnimationFrame && onAnimationFrame(result);\n\n    /**\n     * Exit if the result is equal to the input\n     *\n     * - Trim control to text length\n     * - fire onAnimationEnd\n     */\n    if (result === text) {\n      controlRef.current.splice(text.length, controlRef.current.length);\n      onAnimationEnd && onAnimationEnd();\n\n      cancelAnimationFrame(rafRef.current);\n    }\n\n    stepRef.current++;\n  };\n\n  /**\n   * Reset scramble controls\n   *\n   * if overflow is true, overflow the control to the an empty array, the size of the text input. This will cause the animation to play from an empty string\n   */\n  const reset = () => {\n    stepRef.current = 0;\n    scrambleIndexRef.current = 0;\n    overdriveRef.current = 0;\n    if (!overflow) {\n      controlRef.current = new Array(text?.length);\n    }\n  };\n\n  /**\n   * Restarts the animation\n   *\n   * Cancels the current animation frame, resets the scramble index and other controls, and requests a new animation\n   */\n  const play = () => {\n    cancelAnimationFrame(rafRef.current);\n    reset();\n    onAnimationStart && onAnimationStart();\n    rafRef.current = requestAnimationFrame(animate);\n  };\n\n  /**\n   * reset scramble when text input is changed\n   */\n  useEffect(() => {\n    reset();\n  }, [text]);\n\n  /**\n   * start or stop animation when text and speed change\n   */\n  useEffect(() => {\n    cancelAnimationFrame(rafRef.current);\n\n    rafRef.current = requestAnimationFrame(animate);\n\n    // cancel raf on unmount\n    return () => {\n      cancelAnimationFrame(rafRef.current);\n    };\n  }, [animate]);\n\n  useEffect(() => {\n    if (!playOnMount) {\n      controlRef.current = text.split('');\n      stepRef.current = text.length;\n      scrambleIndexRef.current = text.length;\n      overdriveRef.current = text.length;\n      draw();\n      cancelAnimationFrame(rafRef.current);\n    }\n  }, []);\n\n  return { ref: nodeRef, replay: play };\n};\n"],"names":["useScrambledTitle","text","_useScramble","useScramble","speed","overdrive","scramble","ref","replay","_jsx","className","onClick","Codeblock","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","children","React","meta","require","date","Date","toLocaleDateString","year","month","day","_jsxs","Navbar","title","src","href","Footer","getRandomInt","min","max","Math","floor","random","getRandomChar","range","rand","length","String","fromCharCode","props","_props$playOnMount","playOnMount","_props$text","_props$speed","_props$seed","seed","_props$step","step","_props$tick","tick","_props$scramble","_props$chance","chance","_props$overflow","overflow","_props$range","_props$overdrive","onAnimationStart","onAnimationFrame","onAnimationEnd","_props$ignore","ignore","window","matchMedia","matches","nodeRef","useRef","rafRef","elapsedRef","fpsInterval","stepRef","scrambleIndexRef","controlRef","overdriveRef","setIfNotIgnored","replace","includes","onTick","i","current","currentIndex","shouldScramble","ceil","stepForward","pop","splice","push","resizeControl","index","seedForward","animate","time","requestAnimationFrame","onOverdrive","draw","result","controlValue","innerHTML","cancelAnimationFrame","reset","Array","useEffect","split"],"sourceRoot":""}